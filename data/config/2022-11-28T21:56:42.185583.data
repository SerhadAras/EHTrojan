environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\Serhad Aras\\AppData\\Roaming', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': '132620891825506753', 'CHROME_CRASHPAD_PIPE_NAME': '\\\\.\\pipe\\crashpad_17560_HNOTBGQJHEJVMSTB', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'SERHAD', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'CUDA_PATH': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6', 'CUDA_PATH_V11_6': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\Serhad Aras', 'LOCALAPPDATA': 'C:\\Users\\Serhad Aras\\AppData\\Local', 'LOGONSERVER': '\\\\SERHAD', 'MOZ_PLUGIN_PATH': 'C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\plugins\\', 'MYSQLCONNECTOR_ASSEMBLIESPATH': 'C:\\Program Files (x86)\\MySQL\\Connector NET 8.0\\Assemblies\\v4.5.2', 'NUMBER_OF_PROCESSORS': '12', 'NVTOOLSEXT_PATH': 'C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\', 'ONEDRIVE': 'C:\\Users\\Serhad Aras\\OneDrive - AP Hogeschool Antwerpen', 'ONEDRIVECOMMERCIAL': 'C:\\Users\\Serhad Aras\\OneDrive - AP Hogeschool Antwerpen', 'ONEDRIVECONSUMER': 'C:\\Users\\Serhad Aras\\OneDrive', 'ORIGINAL_XDG_CURRENT_DESKTOP': 'undefined', 'OS': 'Windows_NT', 'PATH': 'C:\\Users\\Serhad Aras\\AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\cv2\\../../x64/vc14/bin;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\CLI2\\wbin;C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin\\;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6\\libnvvp;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\Program Files\\dotnet\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\Microsoft Network Monitor 3\\;C:\\Program Files\\PuTTY\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\ProgramData\\chocolatey\\bin;C:\\Users\\Serhad Aras\\AppData\\Local\\Programs\\Python\\Python39;C:\\Users\\Serhad Aras\\AppData\\Local\\Programs\\Python\\Python39\\Scripts;C:\\Program Files\\R\\R-4.1.1\\bin;C:\\Users\\Serhad Aras\\miniconda3;C:\\Users\\Serhad Aras\\miniconda3\\Library\\bin;C:\\Users\\Serhad Aras\\miniconda3\\Scripts;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\nodejs\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2022.1.1\\;C:\\Program Files\\Amazon\\AWSCLIV2\\;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe;;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\minikube;C:\\Program Files\\Kubernetes\\Minikube;C:\\Program Files\\MySQL\\MySQL Shell 8.0\\bin\\;C:\\Users\\Serhad Aras\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Serhad Aras\\.dotnet\\tools;C:\\Users\\Serhad Aras\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\Serhad Aras\\AppData\\Local\\gitkraken\\bin;C:\\Users\\Serhad Aras\\.dotnet\\tools;C:\\Users\\Serhad Aras\\AppData\\Roaming\\npm;C:\\Program Files\\heroku\\bin;C:\\Users\\Serhad Aras\\AppData\\Local\\GitHubDesktop\\bin;C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe;C:\\Program Files\\Amazon\\AWSCLIV2\\;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.6\\libnvvp;C:\\Users\\Serhad Aras\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Windows\\SysWOW64\\zlibwapi.dll;C:\\Windows\\System32\\zlibwapi.dll;C:\\Users\\Serhad Aras\\OneDrive - AP Hogeschool Antwerpen\\Neural Networks\\Labo 4\\dll_x64;C:\\Users\\Serhad Aras\\OneDrive - AP Hogeschool Antwerpen\\Cyber Security Advanced\\dependency-check-7.2.0-release\\dependency-check\\bin;C:\\Program Files\\Java\\jdk1.7.0_72\\bin;%JAVA_HOME%\\bin;C:\\Users\\Serhad Aras\\OneDrive - AP Hogeschool Antwerpen\\Cyber Security Advanced\\dependency-check-7.2.0-release\\dependency-check\\bin\\Security-Project;', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.CPL', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 165 Stepping 2, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': 'a502', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Users\\Serhad Aras\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files (x86)\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules;C:\\Program Files (x86)\\AutoIt3\\AutoItX', 'PT8HOME': 'C:\\Program Files\\Cisco Packet Tracer 8.1.1', 'PUBLIC': 'C:\\Users\\Public', 'RTOOLS40_HOME': 'C:\\rtools40', 'SESSIONNAME': 'Console', 'SSLKEYLOGFILE': '\\Users\\Serhad Aras\\Desktop\\premaster.txt', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\SERHAD~1\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\SERHAD~1\\AppData\\Local\\Temp', 'USERDOMAIN': 'SERHAD', 'USERDOMAIN_ROAMINGPROFILE': 'SERHAD', 'USERNAME': 'Serhad Aras', 'USERPROFILE': 'C:\\Users\\Serhad Aras', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'VS160COMCOMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools\\', 'WINDIR': 'C:\\WINDOWS', 'ZES_ENABLE_SYSMAN': '1', 'TERM_PROGRAM': 'vscode', 'TERM_PROGRAM_VERSION': '1.73.1', 'LANG': 'nl_NL.UTF-8', 'COLORTERM': 'truecolor', 'GIT_ASKPASS': 'c:\\Users\\Serhad Aras\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass.sh', 'VSCODE_GIT_ASKPASS_NODE': 'C:\\Users\\Serhad Aras\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '--ms-enable-electron-run-as-node', 'VSCODE_GIT_ASKPASS_MAIN': 'c:\\Users\\Serhad Aras\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass-main.js', 'VSCODE_GIT_IPC_HANDLE': '\\\\.\\pipe\\vscode-git-a5751e2e28-sock'})